import { collection, getDocs, query, where } from "firebase/firestore";
import { userDataService } from "./user_data";
import { db } from "../firebase";
import { UserInfo } from "../models/UserInfo";
import { Review } from "../models/Review";

export class LabelingSessionService {
    countPlacesLabeled: number = 0;
    lastSessionTime: Date | null = null;
    startedAt: Date | null = null;
    canLabel: boolean = false;
    placesLabeledIds: string[];

    constructor() {
        this._setLastSessionAndCountPlacesLabeled();
        this.startedAt = new Date(Date.now());
        this.placesLabeledIds = this._getUserLabeledIds();
    }

    _setLastSessionAndCountPlacesLabeled() {
        const userData = userDataService.getUserInfo();
        const lastSessionTime = userData?.last_session_at;

        if (lastSessionTime && lastSessionTime!=null) {
            const date = new Date(lastSessionTime);
            this.lastSessionTime = date;
        } else {
            this.lastSessionTime = new Date(Date.now());
        }

        const lastSession = this.lastSessionTime?.getTime() || 0;
        const currentTime = Date.now();
        const timeSinceLastSession = currentTime - lastSession;
        const twentyFourHours = 24 * 60 * 60 * 1000;
        const maxPlaces = 25;

        const hasBeen24Hours = timeSinceLastSession > twentyFourHours;
        if(hasBeen24Hours) {
            this.countPlacesLabeled = 0;
            this.canLabel = true;
        }else{
            this.countPlacesLabeled = userData?.count_places_labeled_last_session || 0;
            this.canLabel = this.countPlacesLabeled < maxPlaces;
        }
    }
    
    _getUserLabeledIds() : string[] {
        const userId = userDataService.getUserInfo()?.id;
        try {
            const collectionRef = collection(db, "reviews");
            const q = query(collectionRef, where("reviewer_id", "==", userId));
            const snapshot = getDocs(q);
            const placesIds: string[] = []; 
            snapshot.then((querySnapshot) => {
                querySnapshot.forEach((doc) => {
                    const data = doc.data();
                    if (data.place_id) {
                        placesIds.push(data.place_id);
                    }
                });
            })
            .finally(() => {
                return placesIds;
            });

            return [];
        } catch (error) {
            return [];
        }
    }

    async labelPlace(placeId: string, hasBeenThere: boolean, vibes: string[]) {
        this.placesLabeledIds.push(placeId);
        this.countPlacesLabeled += 1;
        const user = userDataService.getUserInfo();
        if (user) {
            user.count_places_labeled_last_session = this.countPlacesLabeled;
            user.last_session_at = this.startedAt;
            user.places_reviewed_ids.push(placeId);
            const updatedUser = await user.addReviewedPlace(placeId);
            if(updatedUser){
                const newUser = await UserInfo.getFromDb(user.firebase_uid);
                newUser && userDataService.setUserInfo(newUser);

                const review = new Review(
                    '', // id will be generated by Firestore
                    user.firebase_uid,
                    placeId,
                    new Date(Date.now()),
                    vibes,
                    hasBeenThere
                );

                if(await review.sendToDb()){
                    console.log("Review sent to Firestore successfully.");
                    return;
                }

                console.error("Error sending review to Firestore.");
            }
            
        }
    }
}